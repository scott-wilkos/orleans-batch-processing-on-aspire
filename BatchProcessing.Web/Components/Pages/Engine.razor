@page "/engine"
@using BatchProcessing.Web.Services
@implements IDisposable

@rendermode InteractiveServer
@inject ApiClient Api

<PageTitle>Engine Example</PageTitle>

<h1>Batch Engine Simulator</h1>

<InputNumber @bind-Value="@_recordsToCreate"></InputNumber>
<button class="btn btn-primary" @onclick="@RunAnalysis" disabled="@_isSubmitting">Simulate Batch Run</button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Status</th>
            <th>Current Record</th>
            <th>Total Records</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var engineRun in _engineRuns)
        {
            <tr>
                <td>@engineRun.Id.ToString()</td>
                <td>@engineRun.Status</td>
                <td>@engineRun.RecordsProcessed</td>
                <td>@engineRun.RecordCount</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private readonly List<EngineStatusRecord> _engineRuns = new();
    private Timer? _timer;

    private int _recordsToCreate = 300;

    private bool _isSubmitting;

    private bool _statusCheckRunning;

    protected override Task OnInitializedAsync()
    {
        _timer = new Timer(async _ => await CheckStatus(), null, 0, 1000);
        return Task.CompletedTask;
    }

    // Check the status of the engine runs
    // NOTE: this is not a great way to do this.  There's a variety of ways to improve this, but it's simple for now
    private async Task CheckStatus()
    {
        if (_statusCheckRunning)
            return;

        List<Task<EngineStatusRecord?>> tasks = new();

        foreach (var item in _engineRuns)
        {
            if (item.Status == AnalysisStatus.Completed)
            {
                continue;
            }

            tasks.Add(Api.GetBatchProcessingStatusAsync(item.Id));
        }

        var results = await Task.WhenAll(tasks);

        foreach (var result in results)
        {
            if (result != null)
            {
                var existing = _engineRuns.FirstOrDefault(x => x.Id == result.Id);
                if (existing != null)
                {
                    _engineRuns.Remove(existing);
                }

                _engineRuns.Add(result);
            }
        }

        _statusCheckRunning = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task RunAnalysis()
    {
        _isSubmitting = true;

        var runGuid = await Api.StartBatchProcessingAsync(_recordsToCreate);

        var run = await Api.GetBatchProcessingStatusAsync(runGuid);

        if (run != null)
        {
            _engineRuns.Add(run);
        }

        _isSubmitting = false;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
